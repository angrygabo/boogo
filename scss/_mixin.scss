// breakpoints
@mixin media-breakpoint-down($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
      @media (max-width: map-get($breakpoints, $breakpoint)) {
        @content;
      }
    }
}
@mixin media-breakpoint-up($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
      @media (min-width: map-get($breakpoints, $breakpoint)) {
        @content;
      }
    }
}
@mixin media-breakpoint-only($breakpoint) {
    @if $breakpoint == xl {
      $breakpoint : lg;
      @if map-has-key($breakpoints, $breakpoint) {
        @media (min-width: map-get($breakpoints, $breakpoint)) {
          @content;
        }
      }
    }
    @if $breakpoint == lg {
      $breakpoint : lg;
      $upper: lg;
      $lower: md;
      @if map-has-key($breakpoints, $breakpoint) {
        @media (min-width: map-get($breakpoints, $lower)) and (max-width: map-get($breakpoints, $upper)) {
          @content;
        }
      }
    }
    @if $breakpoint == md {
      $breakpoint : md;
      $upper: md;
      $lower: sm;
      @if map-has-key($breakpoints, $breakpoint) {
        @media (min-width: map-get($breakpoints, $lower)) and (max-width: map-get($breakpoints, $upper)) {
          @content;
        }
      }
    }
    @if $breakpoint == sm {
      $breakpoint : sm;
      @if map-has-key($breakpoints, $breakpoint) {
        @media (max-width: map-get($breakpoints, $breakpoint)) {
          @content;
        }
      }
    }
    @if $breakpoint == xs {
      $breakpoint : xs;
      @if map-has-key($breakpoints, $breakpoint) {
        @media (max-width: map-get($breakpoints, $breakpoint)) {
          @content;
        }
      }
    }
}
@mixin media-breakpoint-between($lower, $upper) {
    @if map-has-key($breakpoints, $lower) {
      @media (min-width: map-get($breakpoints, $lower)) and (max-width: map-get($breakpoints, $upper)) {
        @content;
      }
    }
}

// contenedores
@mixin container($size) {
  .container {
    @if $size == xl {
      width: $container-xl;
    }
    @if $size == lg {
      width: $container-lg;
    }
    @if $size == md {
      width: $container-md;
    }
    @if $size == sm {
      width: $container-sm;
    }
    @if $size == xs {
      width: $container-xs;
    }
  }
}

// clearfix
@mixin clearfix() {
    &::after {
      display: block;
      content: "";
      clear: both;
    }
}

// offset
@mixin offset($offset) {
  @for $col from 1 through $cols {
    @if $offset == $col {
      margin-left: calc((#{$offset} / 12) * 100%);
    }
  }
}

// col-size
@mixin col-size() { //se cumple
  flex-basis: 0;
  flex-grow: 1;
  max-width: 100%;
}

// row cols
@mixin row-cols($row-col) { //se cumple
  @for $col from 1 through $cols {
    @if $row-col == $col {
      flex:  0 0 calc(100% / #{$row-col});
      max-width: calc(100% / #{$row-col});
    }
  }
}

// cols
@mixin col-default($col-calc) {
  @for $col from 1 through $cols {
    @if $col-calc  == $col {
        flex: 0 0 calc((#{$col} / 12) * 100%);
        max-width: calc((#{$col} / 12) * 100%);
    }
  }
}

@mixin col($col,$spacing) {
  @if $spacing == 1 {
    flex: 0 0 calc(((#{$col} / 12) * 100%) - 0.5rem);
    max-width: calc(((#{$col} / 12) * 100%) - 0.5rem);
    margin-bottom: 1rem;
    @if $col == 12 {
      flex: 0 0 calc((#{$col} / 12) * 100%);
      max-width: calc((#{$col} / 12) * 100%);
    }
  }
  @if $spacing == 2 {
    flex: 0 0 calc(((#{$col} / 12) * 100%) - 1rem);
    max-width: calc(((#{$col} / 12) * 100%) - 1rem);
    margin-bottom: 2rem;
    @if $col == 12 {
      flex: 0 0 calc((#{$col} / 12) * 100%);
      max-width: calc((#{$col} / 12) * 100%);
    }
  }
  @if $spacing == 3 {
    flex: 0 0 calc(((#{$col} / 12) * 100%) - 2rem);
    max-width: calc(((#{$col} / 12) * 100%) - 2rem);
    margin-bottom: 4rem;
    @if $col == 12 {
      flex: 0 0 calc((#{$col} / 12) * 100%);
      max-width: calc((#{$col} / 12) * 100%);
    }
  }
}

// flex
@mixin flex-wrap {
  flex-wrap: wrap;
}
@mixin d-flex {
  display: flex;
}
@mixin d-inline-flex {
  display: inline-flex;
}

// padding
@mixin spacing-pt($spacing) {
  @if $spacing == 5 {
    padding-top: $rem*3!important;
  }
  @if $spacing == 4 {
    padding-top: $rem*1.5!important;
  }
  @if $spacing == 3 {
    padding-top: $rem!important;
  }
  @if $spacing == 2 {
    padding-top: $rem*.5!important;
  }
  @if $spacing == 1 {
    padding-top: $rem*.25!important;
  }
  @if $spacing == 0 {
    padding-top: 0!important;
  }
}

@mixin spacing-pb($spacing) {
  @if $spacing == 5 {
    padding-bottom: $rem*3!important;
  }
  @if $spacing == 4 {
    padding-bottom: $rem*1.5!important;
  }
  @if $spacing == 3 {
    padding-bottom: $rem!important;
  }
  @if $spacing == 2 {
    padding-bottom: $rem*.5!important;
  }
  @if $spacing == 1 {
    padding-bottom: $rem*.25!important;
  }
  @if $spacing == 0 {
    padding-bottom: 0!important;
  }
}

@mixin spacing-pr($spacing) {
  @if $spacing == 5 {
    padding-right: $rem*3!important;
  }
  @if $spacing == 4 {
    padding-right: $rem*1.5!important;
  }
  @if $spacing == 3 {
    padding-right: $rem!important;
  }
  @if $spacing == 2 {
    padding-right: $rem*.5!important;
  }
  @if $spacing == 1 {
    padding-right: $rem*.25!important;
  }
  @if $spacing == 0 {
    padding-right: 0!important;
  }
}

@mixin spacing-pl($spacing) {
  @if $spacing == 5 {
    padding-left: $rem*3!important;
  }
  @if $spacing == 4 {
    padding-left: $rem*1.5!important;
  }
  @if $spacing == 3 {
    padding-left: $rem!important;
  }
  @if $spacing == 2 {
    padding-left: $rem*.5!important;
  }
  @if $spacing == 1 {
    padding-left: $rem*.25!important;
  }
  @if $spacing == 0 {
    padding-left: 0!important;
  }
}

// margin
@mixin spacing-mt($spacing) {
  @if $spacing == 5 {
    margin-top: $rem*3!important;
  }
  @if $spacing == 4 {
    margin-top: $rem*1.5!important;
  }
  @if $spacing == 3 {
    margin-top: $rem!important;
  }
  @if $spacing == 2 {
    margin-top: $rem*.5!important;
  }
  @if $spacing == 1 {
    margin-top: $rem*.25!important;
  }
  @if $spacing == 0 {
    margin-top: 0!important;
  }
}

@mixin spacing-mb($spacing) {
  @if $spacing == 5 {
    margin-bottom: $rem*3!important;
  }
  @if $spacing == 4 {
    margin-bottom: $rem*1.5!important;
  }
  @if $spacing == 3 {
    margin-bottom: $rem!important;
  }
  @if $spacing == 2 {
    margin-bottom: $rem*.5!important;
  }
  @if $spacing == 1 {
    margin-bottom: $rem*.25!important;
  }
  @if $spacing == 0 {
    margin-bottom: 0!important;
  }
}

@mixin spacing-mr($spacing) {
  @if $spacing == 5 {
    margin-right: $rem*3!important;
  }
  @if $spacing == 4 {
    margin-right: $rem*1.5!important;
  }
  @if $spacing == 3 {
    margin-right: $rem!important;
  }
  @if $spacing == 2 {
    margin-right: $rem*.5!important;
  }
  @if $spacing == 1 {
    margin-right: $rem*.25!important;
  }
  @if $spacing == 0 {
    margin-right: 0!important;
  }
}

@mixin spacing-ml($spacing) {
  @if $spacing == 5 {
    margin-left: $rem*3!important;
  }
  @if $spacing == 4 {
    margin-left: $rem*1.5!important;
  }
  @if $spacing == 3 {
    margin-left: $rem!important;
  }
  @if $spacing == 2 {
    margin-left: $rem*.5!important;
  }
  @if $spacing == 1 {
    margin-left: $rem*.25!important;
  }
  @if $spacing == 0 {
    margin-left: 0!important;
  }
}

// floats
@mixin float-left() {
  float: left;
}
@mixin float-right() {
  float: right;
}
@mixin float-none() {
  float: none;
}

// hidden elements
@mixin hidden {
  display: none !important;
  visibility: hidden !important;
}

// text align
@mixin text-center() {
  text-align: center;
}
@mixin text-left() {
  text-align: left;
}
@mixin text-right() {
  text-align: right;
}
@mixin text-justify() {
  text-align: justify;
}

// justify-content
@mixin justify-content-flex-start() {
  justify-content: flex-start;
}
@mixin justify-content-flex-end() {
  justify-content: flex-end;
}
@mixin justify-content-center() {
  justify-content: center;
}
@mixin justify-content-space-between() {
  justify-content: space-between;
}
@mixin justify-content-space-around() {
  justify-content: space-around;
}

// positions
@mixin position-static () {
  position: static;
}
@mixin position-relative() {
  position: relative;
}
@mixin position-absolute() {
  position: absolute;
}
@mixin position-fixed() {
  position: fixed;
}
@mixin position-sticky() {
  position: sticky;
}