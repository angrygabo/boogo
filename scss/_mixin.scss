// breakpoints
@mixin media-breakpoint-down($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
      @media (max-width: map-get($breakpoints, $breakpoint)) {
        @content;
      }
    }
}
@mixin media-breakpoint-up($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
      @media (min-width: map-get($breakpoints, $breakpoint)) {
        @content;
      }
    }
}
@mixin media-breakpoint-only($breakpoint) {
    @if $breakpoint == xl {
      $breakpoint : lg;
      @if map-has-key($breakpoints, $breakpoint) {
        @media (min-width: map-get($breakpoints, $breakpoint)) {
          @content;
        }
      }
    }
    @if $breakpoint == lg {
      $breakpoint : lg;
      $upper: lg;
      $lower: md;
      @if map-has-key($breakpoints, $breakpoint) {
        @media (min-width: map-get($breakpoints, $lower)) and (max-width: map-get($breakpoints, $upper)) {
          @content;
        }
      }
    }
    @if $breakpoint == md {
      $breakpoint : md;
      $upper: md;
      $lower: sm;
      @if map-has-key($breakpoints, $breakpoint) {
        @media (min-width: map-get($breakpoints, $lower)) and (max-width: map-get($breakpoints, $upper)) {
          @content;
        }
      }
    }
    @if $breakpoint == sm {
      $breakpoint : sm;
      @if map-has-key($breakpoints, $breakpoint) {
        @media (max-width: map-get($breakpoints, $breakpoint)) {
          @content;
        }
      }
    }
    @if $breakpoint == xs {
      $breakpoint : xs;
      @if map-has-key($breakpoints, $breakpoint) {
        @media (max-width: map-get($breakpoints, $breakpoint)) {
          @content;
        }
      }
    }
}
@mixin media-breakpoint-between($lower, $upper) {
    @if map-has-key($breakpoints, $lower) {
      @media (min-width: map-get($breakpoints, $lower)) and (max-width: map-get($breakpoints, $upper)) {
        @content;
      }
    }
}

// contenedores
@mixin container($size) {
  .container {
    @if $size == xl {
      width: $container-xl;
    }
    @if $size == lg {
      width: $container-lg;
    }
    @if $size == md {
      width: $container-md;
    }
    @if $size == sm {
      width: $container-sm;
    }
    @if $size == xs {
      width: $container-xs;
    }
  }
}

// clearfix
@mixin clearfix() {
    &::after {
      display: block;
      content: "";
      clear: both;
    }
}

// offset
@mixin offset($offset) {
  @for $col from 1 through $cols {
    @if $offset == $col {
      margin-left: calc((#{$offset} / 12) * 100%);
    }
  }
}

// row cols
@mixin row-cols($row-col) { //se cumple
  @for $col from 1 through $cols {
    @if $row-col == $col {
      flex:  0 0 calc(100% / #{$row-col});
      max-width: calc(100% / #{$row-col});
    }
  }
}

// cols
@mixin col-default($col-calc) {
  flex-wrap: wrap;
  @for $col from 1 through $cols {
    @if $col-calc  == $col {
        flex: 0 0 calc((#{$col} / 12) * 100%);
        max-width: calc((#{$col} / 12) * 100%);
    }
  }
}

// ajuste márgenes últimos elementos
@mixin ajuste-margen($col) {
  @if $col == 1 {
    &:nth-of-type(12n) {
      margin-right: 0;
    }
    &:nth-last-child(-n+12) {
      margin-bottom: 0;
    }
  }
  @else if $col == 2 {
      &:nth-of-type(6n) {
        margin-right: 0;
      }
      &:nth-last-child(-n+6) {
        margin-bottom: 0;
      }
  }
  @else if $col == 3 {
      &:nth-of-type(4n) {
        margin-right: 0;
      }
      &:nth-last-child(-n+4) {
        margin-bottom: 0;
      }
  }
  @else if $col == 4 {
      &:nth-of-type(3n) {
        margin-right: 0;
      }
      &:nth-last-child(-n+3) {
        margin-bottom: 0;
      }
  }
  @else if $col == 5 {
      &:nth-of-type(2n) {
        margin-right: 0;
      }
      &:nth-last-child(-n+2) {
        margin-bottom: 0;
      }
  }
  @else if $col == 6 {
      &:nth-of-type(2n) {
        margin-right: 0;
      }
      &:nth-last-child(-n+2) {
        margin-bottom: 0;
      }
  }
  @else if $col == 7 {
      &:nth-last-child(-n+1) {
        margin-bottom: 0;
      }
  }
  @else if $col == 8 {
      &:nth-last-child(-n+1) {
        margin-bottom: 0;
      }
  }
  @else if $col == 9 {
      &:nth-last-child(-n+1) {
        margin-bottom: 0;
      }
  }
  @else if $col == 10 {
      &:nth-last-child(-n+1) {
        margin-bottom: 0;
      }
  }
  @else if $col == 11 {
      &:nth-last-child(-n+1) {
        margin-bottom: 0;
      }
  }
  @else if $col == 12 {
      &:nth-last-child(-n+1) {
        margin-bottom: 0;
      }
  }
}

@mixin col($col,$spacing) {
  flex-wrap: wrap;
  @if $spacing == 1 {
    flex: 0 0 calc(((#{$col} / 12) * 100%) - 0.5rem);
    max-width: calc(((#{$col} / 12) * 100%) - 0.5rem);
    margin-bottom: 1rem;
    @include ajuste-margen(#{$col});
    &.col-sm-12 {
      margin-left: .25rem;
      margin-right: .25rem;
      margin-bottom: .25rem;
    }
  }
  @if $spacing == 2 {
    flex: 0 0 calc(((#{$col} / 12) * 100%) - 1rem);
    max-width: calc(((#{$col} / 12) * 100%) - 1rem);
    margin-bottom: 2rem;
    @include ajuste-margen(#{$col});
    &.col-sm-12 {
      margin-left: .5rem;
      margin-right: .5rem;
      margin-bottom: .5rem;
    }
  }
  @if $spacing == 3 {
    flex: 0 0 calc(((#{$col} / 12) * 100%) - 2rem);
    max-width: calc(((#{$col} / 12) * 100%) - 2rem);
    margin-bottom: 4rem;
    @include ajuste-margen(#{$col});
    &.col-sm-12 {
      margin-left: 1rem;
      margin-right: 1rem;
      margin-bottom: 1rem;
    }
  }
}

// cont flex
@mixin col-flex {
  position: relative;
  display: flex;
}

// display
@mixin wrap-flex {
  display: flex;
  flex-wrap: wrap;
  flex-direction: column;
}
@mixin d-flex {
  display: flex;
}
@mixin d-inline-flex {
  display: inline-flex;
}

// padding
@mixin spacing-pt($spacing) {
  @if $spacing == 5 {
    padding-top: $rem*3!important;
  }
  @if $spacing == 4 {
    padding-top: $rem*1.5!important;
  }
  @if $spacing == 3 {
    padding-top: $rem!important;
  }
  @if $spacing == 2 {
    padding-top: $rem*.5!important;
  }
  @if $spacing == 1 {
    padding-top: $rem*.25!important;
  }
}

@mixin spacing-pb($spacing) {
  @if $spacing == 5 {
    padding-bottom: $rem*3!important;
  }
  @if $spacing == 4 {
    padding-bottom: $rem*1.5!important;
  }
  @if $spacing == 3 {
    padding-bottom: $rem!important;
  }
  @if $spacing == 2 {
    padding-bottom: $rem*.5!important;
  }
  @if $spacing == 1 {
    padding-bottom: $rem*.25!important;
  }
}

@mixin spacing-pr($spacing) {
  @if $spacing == 5 {
    padding-right: $rem*3!important;
  }
  @if $spacing == 4 {
    padding-right: $rem*1.5!important;
  }
  @if $spacing == 3 {
    padding-right: $rem!important;
  }
  @if $spacing == 2 {
    padding-right: $rem*.5!important;
  }
  @if $spacing == 1 {
    padding-right: $rem*.25!important;
  }
}

@mixin spacing-pl($spacing) {
  @if $spacing == 5 {
    padding-left: $rem*3!important;
  }
  @if $spacing == 4 {
    padding-left: $rem*1.5!important;
  }
  @if $spacing == 3 {
    padding-left: $rem!important;
  }
  @if $spacing == 2 {
    padding-left: $rem*.5!important;
  }
  @if $spacing == 1 {
    padding-left: $rem*.25!important;
  }
}

// margin
@mixin spacing-mt($spacing) {
  @if $spacing == 5 {
    margin-top: $rem*3!important;
  }
  @if $spacing == 4 {
    margin-top: $rem*1.5!important;
  }
  @if $spacing == 3 {
    margin-top: $rem!important;
  }
  @if $spacing == 2 {
    margin-top: $rem*.5!important;
  }
  @if $spacing == 1 {
    margin-top: $rem*.25!important;
  }
}

@mixin spacing-mb($spacing) {
  @if $spacing == 5 {
    margin-bottom: $rem*3!important;
  }
  @if $spacing == 4 {
    margin-bottom: $rem*1.5!important;
  }
  @if $spacing == 3 {
    margin-bottom: $rem!important;
  }
  @if $spacing == 2 {
    margin-bottom: $rem*.5!important;
  }
  @if $spacing == 1 {
    margin-bottom: $rem*.25!important;
  }
}

@mixin spacing-mr($spacing) {
  @if $spacing == 5 {
    margin-right: $rem*3!important;
  }
  @if $spacing == 4 {
    margin-right: $rem*1.5!important;
  }
  @if $spacing == 3 {
    margin-right: $rem!important;
  }
  @if $spacing == 2 {
    margin-right: $rem*.5!important;
  }
  @if $spacing == 1 {
    margin-right: $rem*.25!important;
  }
}

@mixin spacing-ml($spacing) {
  @if $spacing == 5 {
    margin-left: $rem*3!important;
  }
  @if $spacing == 4 {
    margin-left: $rem*1.5!important;
  }
  @if $spacing == 3 {
    margin-left: $rem!important;
  }
  @if $spacing == 2 {
    margin-left: $rem*.5!important;
  }
  @if $spacing == 1 {
    margin-left: $rem*.25!important;
  }
}

// animated background
@mixin gradient-bg {
  background: linear-gradient(-45deg, #BB72FE, #C483FE, #F17E8A, #FB6281);
  background-size: 400% 400%;
  animation: gradient 15s ease infinite;
  @keyframes gradient {
      0% {
          background-position: 0% 50%;
      }
      50% {
          background-position: 100% 50%;
      }
      100% {
          background-position: 0% 50%;
      }
  }
}